<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>shop</title>
  <!-- swiper slider  -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
  <!-- font awesome cdn  -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
  <!-- bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- css  -->
  <link rel="stylesheet" href="../assets/css/style.css" />
  <!-- shop css  -->
  <link rel="stylesheet" href="../assets/css/shop.css" />
</head>
<body>
  <section>
    <div id="header"></div>
    <div class="logo-head d-flex justify-content-center align-items-center">
      <div class="logo col-1">
        <img src="../assets/images/logo (2).png" class="img-fluid" alt="" />
      </div>
    </div>

    <div class="product-main">
      <div class="container">
        <div id="product-parent"></div>
      </div>
    </div>
  </section>

  <script>
  let uimaker = (data) => {
  document.getElementById('product-parent').innerHTML = ''; // Clear existing content

  // Parent container styling
  const parent = document.getElementById('product-parent');
  parent.style.display = 'flex';
  parent.style.flexWrap = 'wrap'; // Allows wrapping to the next row
  parent.style.justifyContent = 'space-between'; // Space between cards
  parent.style.gap = '1rem'; // Spacing between rows and columns

  data.map((ele) => {
    let div = document.createElement('div');
    div.style.border = '1px solid #ddd';
    div.style.borderRadius = '8px';
    div.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
    div.style.padding = '1rem';
    div.style.margin = '10px';
    div.style.textAlign = 'center';
    div.style.width = '23%'; // Ensures 4 cards fit per row
    div.style.height = '350px'; // Fixed height for all cards
    div.style.boxSizing = 'border-box'; // Includes padding in width calculation

    let image = document.createElement('img');
    image.src = ele.image;
    image.style.width = '100%';
    image.style.height = '180px'; // Fixed height for images
    image.style.objectFit = 'cover'; // Ensures the image scales proportionally and fills the space
    image.style.borderRadius = '8px 8px 0 0';

    let title = document.createElement('h2');
    title.innerHTML = ele.title;
    title.style.fontSize = '1rem';
    title.style.fontWeight = 'bold';
    title.style.margin = '10px 0';

    let price = document.createElement('p');
    price.innerHTML = `$${ele.price}`;
    price.style.color = '#28a745';
    price.style.fontWeight = 'bold';

    let desc = document.createElement('p');
    desc.innerHTML = ele.description;
    desc.style.color = '#555';
    desc.style.margin = '10px 0';
    desc.style.overflow = 'hidden'; // Prevents overflowing text
    desc.style.textOverflow = 'ellipsis'; // Adds ellipsis for long text
    desc.style.whiteSpace = 'nowrap'; // Keeps text in a single line

    let btn1 = document.createElement('button');
    btn1.innerHTML = 'Delete';
    btn1.style.backgroundColor = '#dc3545';
    btn1.style.color = '#fff';
    btn1.style.border = 'none';
    btn1.style.padding = '0.5rem 1rem';
    btn1.style.margin = '5px';
    btn1.style.borderRadius = '4px';
    btn1.style.cursor = 'pointer';
    btn1.addEventListener('click', () => deleteData(ele._id));

    let btn2 = document.createElement('button');
    btn2.innerHTML = 'Edit';
    btn2.style.backgroundColor = '#007bff';
    btn2.style.color = '#fff';
    btn2.style.border = 'none';
    btn2.style.padding = '0.5rem 1rem';
    btn2.style.margin = '5px';
    btn2.style.borderRadius = '4px';
    btn2.style.cursor = 'pointer';
    btn2.addEventListener('click', () => editData(ele));

    div.append(image, title, price, desc, btn1, btn2);
    parent.append(div);
  });
};


    let deleteData = (id) => {
        fetch(`/product/delete/${id}`,{
            method : "DELETE"
        }).then(()=>getdata())
    }

    let updateData = (id) => {
      fetch(`/product/update/${id}`,{
          method : "PATCH"
      }).then(()=>getdata())
    };


 




    let getdata = async () => {
      try {
        let req = await fetch('/product/data')
        let res = await req.json()
        console.log(res)
        uimaker(res)
      } catch (error) {
        console.error('Error fetching data:', error)
      }
    }

    getdata()
  </script>

  <!-- swiper slider  -->
  <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  <!-- slider  -->
  <script src="../assets/js/slider.js"></script>
  <!-- bootstrap  -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <!-- header.js  -->
  <script src="../assets/js/header.js"></script>
</body>
</html>
